# rasa_files/actions.py
# Rasa custom actions file (dynamic FAQ actions will be appended below)
#
# NOTE:
# - This file is intended to live inside your Rasa project (e.g., actions/actions.py).
# - The FAQ updater service will append new action classes at the end of this file.
# - Each appended action will call the Laravel API to fetch the response dynamically and then dispatcher.utter_message it.
#
# Required packages:
# - requests (pip install requests)
# - rasa-sdk (installed as part of Rasa / Rasa SDK environment)

from typing import Any, Text, Dict, List, Optional
import os
import requests
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

# Base configuration: replace with your Laravel API base URL when deploying
LARAVEL_API_BASE = "https://your-laravel-app.com"

def fetch_faq_response(intent_normalized: str, timeout: float = 5.0) -> str:
    """
    Fetch the FAQ response for the given normalized intent directly from the database.

    Supported drivers via environment:
      - FAQ_DB_DRIVER = "mysql" (default) uses pymysql
      - FAQ_DB_DRIVER = "postgres" uses psycopg2

    Required environment variables (set in the environment where Rasa actions run):
      FAQ_DB_DRIVER (mysql|postgres)
      FAQ_DB_HOST
      FAQ_DB_PORT
      FAQ_DB_DATABASE
      FAQ_DB_USERNAME
      FAQ_DB_PASSWORD

    The function performs a simple SELECT on the `faqs` table using a normalized
    comparison (LOWER(REPLACE(intent, ' ', '_')) = intent_normalized).
    On any error or missing row it returns "No answer available."
    """
    driver = os.environ.get("FAQ_DB_DRIVER", "mysql").lower()
    host = os.environ.get("FAQ_DB_HOST", "127.0.0.1")
    port = int(os.environ.get("FAQ_DB_PORT", "3306" if driver == "mysql" else "5432"))
    database = os.environ.get("FAQ_DB_DATABASE", "your_database")
    username = os.environ.get("FAQ_DB_USERNAME", "root")
    password = os.environ.get("FAQ_DB_PASSWORD", "")

    try:
        row = None
        if driver in ("mysql", "mariadb"):
            try:
                import pymysql
                conn = pymysql.connect(
                    host=host,
                    port=port,
                    user=username,
                    password=password,
                    db=database,
                    charset="utf8mb4",
                    cursorclass=pymysql.cursors.DictCursor,
                    connect_timeout=timeout,
                )
                with conn.cursor() as cur:
                    sql = "SELECT response FROM faqs WHERE LOWER(REPLACE(intent, ' ', '_')) = %s LIMIT 1"
                    cur.execute(sql, (intent_normalized,))
                    row = cur.fetchone()
                conn.close()
            except ImportError:
                print("[actions.py] pymysql not installed; cannot query MySQL directly.")
                return "No answer available."
        elif driver in ("postgres", "pgsql", "postgresql"):
            try:
                import psycopg2
                import psycopg2.extras
                conn = psycopg2.connect(
                    host=host,
                    port=port,
                    user=username,
                    password=password,
                    dbname=database,
                    connect_timeout=timeout,
                )
                with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cur:
                    sql = "SELECT response FROM faqs WHERE LOWER(REPLACE(intent, ' ', '_')) = %s LIMIT 1"
                    cur.execute(sql, (intent_normalized,))
                    row = cur.fetchone()
                conn.close()
            except ImportError:
                print("[actions.py] psycopg2 not installed; cannot query Postgres directly.")
                return "No answer available."
        else:
            print(f"[actions.py] Unsupported FAQ_DB_DRIVER: {driver}")
            return "No answer available."

        if not row:
            return "No answer available."

        # row is a mapping-like object
        resp = None
        if isinstance(row, dict):
            resp = row.get("response")
        else:
            # psycopg2 DictRow behaves like mapping as well
            try:
                resp = row["response"]
            except Exception:
                # last-resort: try first element
                if len(row) > 0:
                    resp = row[0]
        return resp if (resp is not None and resp != "") else "No answer available."
    except Exception as e:
        print(f"[actions.py] Error querying DB for {intent_normalized}: {e}")
        return "No answer available."

# ----------------------------
# Dynamic FAQ actions will be appended below
# ----------------------------

# Example appended action (for reference only â€” generated by faq_updater)
#
# class ActionUtterEnrollmentSchedule(Action):
#     def name(self) -> Text:
#         return "action_utter_enrollment_schedule"
#
#     def run(self, dispatcher: CollectingDispatcher,
#             tracker: Tracker,
#             domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
#         reply = fetch_faq_response("enrollment_schedule")
#         dispatcher.utter_message(text=reply)
#         return []
#
# The faq_updater.py microservice will append classes using the same pattern.